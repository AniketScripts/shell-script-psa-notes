Definition:
#######################################################################################
Scripting refers to writing a set of commands in a file to be executed sequentially.

It is used to automate repetitive tasks and system operations.
-------------------------------------------------------------------------------------

Why Use Scripting?
#################################################################################
1. Reduces manual effort by automating routine tasks.

2. Ensures consistency and accuracy in execution.

3. Saves time by executing multiple commands at once.

Example: Automating Daily Commands
--------------------------------------------------------------------------------------

Instead of running these commands manually every day:

whoami
pwd
date
cal
ls -l

We can store them in a script file (tasks.sh) and execute it:

$ bash tasks.sh
----------------------------------------------------------------------------------------

What is Shell Scripting?
###################################################################################

1. The process of executing a script file using a shell (command-line interpreter).

2. Shell scripting helps automate tasks in projects.
----------------------------------------------------------------------------------

Common Use Cases of Shell Scripting:
###################################################################################

-> Backup Automation - Automatically backing up files and databases.

-> Cleanup Scripts - Removing temporary or unnecessary files.

-> Log Analysis - Parsing and analyzing system logs.

-> System Health Checks - Monitoring CPU, memory, and disk usage.

-> Shell scripts typically have a .sh extension.
--------------------------------------------------------------------------------------
Examples:

task.sh      # Script to take backup

Running a Shell Script

To execute a script, use one of the following commands:

$ bash task.sh   # Execute using Bash
$ ./task.sh      # Execute directly (if executable permission is set)

To make the script executable:

$ chmod +x task.sh
----------------------------------------------------------------------------------------
Shell scripting is a powerful way to automate tasks

What is Sha-Bang in Linux?
#####################################################################################

Definition:

Sha-Bang (#!) is used to specify which shell should be used to process a script file. It is placed at the beginning of the script file.

Syntax:

#! /bin/bash

#! is called Sha-Bang or Shebang.

/bin/bash specifies that the script should be executed using the Bash shell.

Why Use Sha-Bang?

-> Ensures the script runs in the correct shell regardless of the user's default shell.

-> Prevents compatibility issues when running scripts across different environments.
----------------------------------------------------------------------------------------

Is Sha-Bang Mandatory?
########################################################################################

-> No, but it is recommended.

-> If omitted, the script will be executed using the default shell set in the system.

-> To explicitly define the shell, always include a Sha-Bang line.

Example Script with Sha-Bang:
________________________________________________________________________________________

#!/bin/bash

# Print current user
whoami

# Print current directory
pwd

# Print date
date

------------------------------------------------------------------------------------------
Alternative to sha-bang

Sh (Bourne Shell): #!/bin/sh

Zsh: #!/bin/zsh
-------------------------------------------------------------------------------------------

Variable Naming Conventions in Shell
############################################################################################

General Rules for Naming Variables:
--------------------------------------
1. Use only letters, numbers, and underscores (_).

2. Variable names must start with a letter or underscore (_), not a number.

3. Do not use spaces in variable names.

4. Avoid special characters (@, #, !, -, etc.).

5. Variable names are case-sensitive.


Examples of valid convention:

valid_name="John"
_valid_name="Doe"
VALID_AGE=25
------------------------------------------

Invalid examples:

123name="Invalid"    # Cannot start with a number
name-with-dash="Bad"  # Cannot contain special characters
name space="Wrong"    # Cannot contain spaces

----------------------------------------------

Best Practices:
--------------

Use UPPERCASE for constants:
-----------------------------
MAX_RETRIES=5
-----------------------------

--------------------------------------------------
Use lowercase with underscores for normal variables:

user_name="Alice"
file_path="/home/alice/documents"
--------------------------------------------------

Use meaningful names instead of generic ones:

counter=10   # Bad
file_count=10  # Good
---------------------------------------------------
Use double quotes when assigning strings that contain spaces:

full_name="John Doe"
---------------------------------------------------
Accessing Variables:

To retrieve a variable's value, use $:

name="Alice"
echo "Hello, $name!"
---------------------------------------------------

Declaring Read-Only Variables:

Use readonly to make a variable immutable:

readonly MY_CONSTANT=100
MY_CONSTANT=200  # Error: cannot modify a readonly variable
----------------------------------------------------

Unsetting a Variable:

Use unset to remove a variable:

my_var="Hello"
unset my_var
echo $my_var  # No output, variable is deleted

Following these naming conventions ensures readability, maintainability, and prevents conflicts in shell scripting
---------------------------------------------------
Example 1:

#!/bin/bash

# Prompt the user to enter their name
echo "Enter your name:"

# Read user input and store it in the variable NAME
read name

# Greet the user with a customized message
echo "hello, $name"

Explanation:

#!/bin/bash
This is called a "shebang" (#!). It tells the system that this script should be executed using the Bash shell.

echo "Please enter your name:"  -Displays a message asking the user to input their name.

read name  - Reads the userâ€™s input from the terminal and stores it in the variable NAME.

echo "hello, $name"  -Prints a greeting message that includes the user's name.
----------------------------------------------------

Example 2:

#!/bin/bash

# Prompt the user to enter their first name and store it in the variable FNAME
read -p "Enter your first name: " first_name

# Prompt the user to enter their last name and store it in the variable LNAME
read -p "Enter your last name: " last_name

# Display the full name
echo "Hello, $first_name $last_name! Welcome!"

------------------------------------------------------------


